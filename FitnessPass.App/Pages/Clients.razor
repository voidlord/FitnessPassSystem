@page "/clients"
@attribute [Authorize]

@inject ClientService clientService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<nav>
    <ul class="nav nav-pills">
        <li class="nav-item">
            <a class="nav-link" href="/clients/add">Add Client</a>
        </li>
    </ul>
</nav>

<h3>Search Client</h3>

<div class="form-group">
    <input type="text" class="form-control" @bind="@searchQuery" placeholder="Enter client name" />
</div>
<br>
<button class="btn btn-primary" @onclick="Search">Search</button>

@if (clients == null || clients.Count == 0)
{
    <br>
    <br>
    <p>No results</p>
}

@if (clients != null && clients.Count != 0)
{
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Phone Number</th>
                <th>Email</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.PhoneNumber</td>
                    <td>@client.Email</td>
                    <td><i class="oi oi-menu" style="cursor: pointer;" @onclick="() => ToggleClientDetails(client.ClientId)"></i></td>
                </tr>
                @if (expandedClientId == client.ClientId)
                {
                    <tr>
                        <td colspan="4">
                            <p>Created date: @client.CreatedDate</p>
                            <p>Personal Identifier: @client.PersonalIdentifier</p>
                            <p>Location: @client.Location</p>
                            <p>Barcode: @client.BarCode</p>
                            <p>Notes: @client.Notes</p>

                            <div class="button-container">
                                <button class="btn btn-primary" @onclick="() => NavigateToEditClient(client.ClientId)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteClient(client.ClientId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    List<Client> clients;
    string searchQuery;
    int expandedClientId = -1;

    void Search()
    {
        if (String.IsNullOrWhiteSpace(searchQuery))
        {
            clients = clientService.GetClients();
        }
        else
        {
            clients = clientService.SearchClientByName(searchQuery);
        }

        expandedClientId = -1;
    }

    void ToggleClientDetails(int clientId)
    {
        if (expandedClientId == clientId)
        {
            expandedClientId = -1;
        }
        else
        {
            expandedClientId = clientId;
        }
    }

    void NavigateToEditClient(int clientId)
    {
        navigationManager.NavigateTo($"/clients/{clientId}");
    }

    async Task DeleteClient(int clientId)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this client?");

        if (confirmed)
        {
            clientService.DeleteClientById(clientId);
            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Search();
    }
}