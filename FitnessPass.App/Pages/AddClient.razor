@page "/clients/add"
@attribute [Authorize]

@inject NavigationManager navigationManager
@inject ClientService clientService
@inject IJSRuntime jsRuntime

<nav>
    <ul class="nav nav-pills">
        <li class="nav-item">
            <button class="btn btn-primary" @onclick="@(()=> navigationManager.NavigateTo("/clients"))">Search</button>
        </li>
    </ul>
</nav>

<h3>Add Client</h3>

@if (errorMessages != null && errorMessages.Count != 0)
{
    <div class="alert alert-danger">
        @foreach (var error in errorMessages)
        {
            <p>@error</p>
        }
    </div>
    <br>
}

<form onsubmit="@AddNewClient">
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" @bind="@client.Name">
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <input type="tel" class="form-control" id="phoneNumber" @bind="@client.PhoneNumber">
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" id="email" @bind="@client.Email">
    </div>
    <div class="form-group">
        <label for="personalIdentifier">Personal Identifier</label>
        <input type="text" class="form-control" id="personalIdentifier" @bind="@client.PersonalIdentifier">
    </div>
    <div class="form-group">
        <label for="location">Location</label>
        <input type="text" class="form-control" id="location" @bind="@client.Location">
    </div>
    <div class="form-group">
        <label for="barcode">Bar Code</label>
        <input type="text" class="form-control" id="barcode" @bind="@client.BarCode">
    </div>
    <div class="form-group">
        <label for="notes">Notes</label>
        <textarea class="form-control" id="notes" rows="3" @bind="@client.Notes"></textarea>
    </div>
    <div class="form-group">
        <label for="photo">Photo</label> <br />
        <video id="videoFeed" width="320" height="240" /><canvas class="d-none" id="currentFrame" width="320" height="240" /><br />
        <button type="button" class="btn btn-primary mb-3" @onclick="OpenCamera">Open</button>
        <button type="button" class="btn btn-primary mb-3" @onclick="CloseCamera">Close</button>
        <button type="button" class="btn btn-primary mb-3" @onclick="CaptureFrame">Capture</button><br />
        @if (!string.IsNullOrEmpty(frameUri)) {
            <img src="@frameUri" />
        }
    </div>
    <br>
    <button type="submit" class="btn btn-primary" @onclick="AddNewClient">Add</button><br />
</form>

@code {
    private DotNetObjectReference<AddClient>? dotNetHelper;

    Client client = new Client();
    List<string> errorMessages;
    private string frameUri;

    private async Task OpenCamera() {
        await jsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
    }

    private async Task CloseCamera() {
        await jsRuntime.InvokeVoidAsync("stopVideo", "videoFeed");
    }

    private async Task CaptureFrame() {
        await jsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ProcessImage(string imageString) {
        client.Photo = imageString;
        frameUri = imageString;
    }

    async Task AddNewClient()
    {
        if (!ValidateForm())
        {
            return;
        }

        await clientService.AddClient(client);

        client = new Client();
    }

    bool ValidateForm()
    {
        errorMessages = new List<string>();

        if (String.IsNullOrEmpty(client.Name) || !Regex.IsMatch(client.Name, "^([A-Z][a-z]+[ -])+[A-Z][a-z]+$"))
        {
            errorMessages.Add("Name is not given or invalid.");
        }

        if (String.IsNullOrEmpty(client.PhoneNumber) || !Regex.IsMatch(client.PhoneNumber, "^[0][0-9]{9}$"))
        {
            errorMessages.Add("Phone number is not given or invalid.");
        }

        if (String.IsNullOrEmpty(client.Email) || !Regex.IsMatch(client.Email, "^([A-Za-z0-9.-])+[@][A-Za-z]+[.][a-z]+$"))
        {
            errorMessages.Add("Email is not given or invalid.");
        }

        if (String.IsNullOrEmpty(client.PersonalIdentifier) || !Regex.IsMatch(client.PersonalIdentifier, "^[0-9]{13}$"))
        {
            errorMessages.Add("Personal identifier is not given or invalid.");
        }

        if (String.IsNullOrEmpty(client.Location) || !Regex.IsMatch(client.Location, "^([A-Z][a-z]+[ -])?[A-Z][a-z]+$"))
        {
            errorMessages.Add("Location name is not given or invalid.");
        }

        if (String.IsNullOrEmpty(client.BarCode) || !Regex.IsMatch(client.BarCode, "^[0-9]+$"))
        {
            errorMessages.Add("Bar code is not given or invalid.");
        }

        if (errorMessages.Count != 0)
        {
            return false;
        }

        return true;
    }
}